//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenBracket=1, CloseBracket=2, OpenParen=3, CloseParen=4, OpenBrace=5, 
		CloseBrace=6, SemiColon=7, Comma=8, Assign=9, QuestionMark=10, Colon=11, 
		Ellipsis=12, Dot=13, PlusPlus=14, MinusMinus=15, Plus=16, Minus=17, BitNot=18, 
		Not=19, Multiply=20, Divide=21, Modulus=22, Power=23, NullCoalesce=24, 
		Hashtag=25, RightShiftArithmetic=26, LeftShiftArithmetic=27, RightShiftLogical=28, 
		LessThan=29, MoreThan=30, LessThanEquals=31, GreaterThanEquals=32, Equals=33, 
		NotEquals=34, IdentityEquals=35, IdentityNotEquals=36, BitAnd=37, BitXOr=38, 
		BitOr=39, And=40, Or=41, MultiplyAssign=42, DivideAssign=43, ModulusAssign=44, 
		PlusAssign=45, MinusAssign=46, LeftShiftArithmeticAssign=47, RightShiftArithmeticAssign=48, 
		RightShiftLogicalAssign=49, BitAndAssign=50, BitXorAssign=51, BitOrAssign=52, 
		PowerAssign=53, ARROW=54, NullLiteral=55, BooleanLiteral=56, DecimalLiteral=57, 
		HexIntegerLiteral=58, OctalIntegerLiteral=59, OctalIntegerLiteral2=60, 
		BinaryIntegerLiteral=61, BigHexIntegerLiteral=62, BigOctalIntegerLiteral=63, 
		BigBinaryIntegerLiteral=64, BigDecimalIntegerLiteral=65, Break=66, New=67, 
		Var=68, Continue=69, While=70, Function=71, Class=72, Import=73, Return=74, 
		TemplateStringLiteral=75, WhiteSpaces=76, LineTerminator=77, Identifier=78, 
		StringLiteral=79;
	public const int
		RULE_main = 0, RULE_statements = 1, RULE_statement = 2, RULE_expression = 3, 
		RULE_identifiers = 4, RULE_commaExpressions = 5, RULE_codeBlock = 6;
	public static readonly string[] ruleNames = {
		"main", "statements", "statement", "expression", "identifiers", "commaExpressions", 
		"codeBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "','", "'='", "'?'", 
		"':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", 
		"'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", 
		"'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", 
		"'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", 
		"'>>>='", "'&='", "'^='", "'|='", "'**='", "'=>'", "'nulo'", null, null, 
		null, null, null, null, null, null, null, null, "'romper'", "'nuevo'", 
		"'var'", "'continuar'", "'mientras'", "'funcion'", "'clase'", "'importar'", 
		"'devolver'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", 
		"Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", 
		"Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag", 
		"RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
		"MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals", "NotEquals", 
		"IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", "And", 
		"Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", "PlusAssign", 
		"MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
		"HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "New", "Var", "Continue", "While", 
		"Function", "Class", "Import", "Return", "TemplateStringLiteral", "WhiteSpaces", 
		"LineTerminator", "Identifier", "StringLiteral"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			State = 16;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] SemiColon() { return GetTokens(TParser.SemiColon); }
		public ITerminalNode SemiColon(int i) {
			return GetToken(TParser.SemiColon, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (Var - 68)) | (1L << (Function - 68)) | (1L << (Return - 68)))) != 0)) {
				{
				{
				State = 18; statement();
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SemiColon) {
					{
					State = 19; Match(SemiColon);
					}
				}

				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDeclarationContext : StatementContext {
		public ITerminalNode Var() { return GetToken(TParser.Var, 0); }
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(TParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDeclarationContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterVarDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitVarDeclaration(this);
		}
	}
	public partial class FunctionDeclarationContext : StatementContext {
		public ITerminalNode Function() { return GetToken(TParser.Function, 0); }
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public FunctionDeclarationContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ITerminalNode Return() { return GetToken(TParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				_localctx = new VarDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 27; Match(Var);
				State = 28; Match(Identifier);
				State = 31;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 29; Match(Assign);
					State = 30; expression(0);
					}
					break;
				}
				}
				break;
			case Function:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; Match(Function);
				State = 34; Match(Identifier);
				State = 35; Match(OpenParen);
				State = 36; identifiers();
				State = 37; Match(CloseParen);
				State = 38; codeBlock();
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 40; Match(Return);
				State = 42;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 41; expression(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayDeclarationContext : ExpressionContext {
		public ITerminalNode OpenBracket() { return GetToken(TParser.OpenBracket, 0); }
		public ITerminalNode CloseBracket() { return GetToken(TParser.CloseBracket, 0); }
		public CommaExpressionsContext commaExpressions() {
			return GetRuleContext<CommaExpressionsContext>(0);
		}
		public ArrayDeclarationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LessThan() { return GetToken(TParser.LessThan, 0); }
		public ITerminalNode MoreThan() { return GetToken(TParser.MoreThan, 0); }
		public ITerminalNode LessThanEquals() { return GetToken(TParser.LessThanEquals, 0); }
		public ITerminalNode GreaterThanEquals() { return GetToken(TParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode And() { return GetToken(TParser.And, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Or() { return GetToken(TParser.Or, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
	}
	public partial class ArrowFunctionContext : ExpressionContext {
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public ITerminalNode ARROW() { return GetToken(TParser.ARROW, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public ArrowFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterArrowFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitArrowFunction(this);
		}
	}
	public partial class AdditivExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Plus() { return GetToken(TParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(TParser.Minus, 0); }
		public AdditivExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterAdditivExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitAdditivExpression(this);
		}
	}
	public partial class IdentifierContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public IdentifierContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}
	public partial class LiteralContext : ExpressionContext {
		public ITerminalNode NullLiteral() { return GetToken(TParser.NullLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(TParser.BooleanLiteral, 0); }
		public ITerminalNode DecimalLiteral() { return GetToken(TParser.DecimalLiteral, 0); }
		public LiteralContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}
	public partial class ParenthesedExpressionContext : ExpressionContext {
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public ParenthesedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterParenthesedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitParenthesedExpression(this);
		}
	}
	public partial class ImportExpressionContext : ExpressionContext {
		public ITerminalNode Import() { return GetToken(TParser.Import, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ImportExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterImportExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitImportExpression(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Equals() { return GetToken(TParser.Equals, 0); }
		public ITerminalNode NotEquals() { return GetToken(TParser.NotEquals, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(TParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(TParser.Divide, 0); }
		public ITerminalNode Modulus() { return GetToken(TParser.Modulus, 0); }
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NullCoalesce() { return GetToken(TParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 47; Match(Identifier);
				}
				break;
			case 2:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 48; Match(NullLiteral);
				}
				break;
			case 3:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 49; Match(BooleanLiteral);
				}
				break;
			case 4:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 50; Match(DecimalLiteral);
				}
				break;
			case 5:
				{
				_localctx = new ImportExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 51; Match(Import);
				State = 52; expression(11);
				}
				break;
			case 6:
				{
				_localctx = new ParenthesedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 53; Match(OpenParen);
				State = 54; expression(0);
				State = 55; Match(CloseParen);
				}
				break;
			case 7:
				{
				_localctx = new ArrayDeclarationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57; Match(OpenBracket);
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || _la==Import || _la==Identifier) {
					{
					State = 58; commaExpressions();
					}
				}

				State = 61; Match(CloseBracket);
				}
				break;
			case 8:
				{
				_localctx = new ArrowFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62; Match(OpenParen);
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 63; identifiers();
					}
				}

				State = 66; Match(CloseParen);
				State = 67; Match(ARROW);
				State = 68; codeBlock();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 94;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 92;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 71;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 72;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 73; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new AdditivExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 74;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 75;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 76; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 77;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 78; Match(NullCoalesce);
						State = 79; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 80;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 81;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 82; expression(8);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 83;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 84;
						_la = TokenStream.LA(1);
						if ( !(_la==Equals || _la==NotEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 85; expression(7);
						}
						break;
					case 6:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 86;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 87; Match(And);
						State = 88; expression(6);
						}
						break;
					case 7:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 89;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 90; Match(Or);
						State = 91; expression(5);
						}
						break;
					}
					} 
				}
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(TParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(TParser.Identifier, i);
		}
		public ITerminalNode[] Comma() { return GetTokens(TParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(TParser.Comma, i);
		}
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 8, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(Identifier);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 98; Match(Comma);
				State = 99; Match(Identifier);
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(TParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(TParser.Comma, i);
		}
		public CommaExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaExpressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCommaExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCommaExpressions(this);
		}
	}

	[RuleVersion(0)]
	public CommaExpressionsContext commaExpressions() {
		CommaExpressionsContext _localctx = new CommaExpressionsContext(Context, State);
		EnterRule(_localctx, 10, RULE_commaExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; expression(0);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 106; Match(Comma);
				State = 107; expression(0);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OpenBrace() { return GetToken(TParser.OpenBrace, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(TParser.CloseBrace, 0); }
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCodeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCodeBlock(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_codeBlock);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenParen:
			case NullLiteral:
			case BooleanLiteral:
			case DecimalLiteral:
			case Var:
			case Function:
			case Import:
			case Return:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Var:
				case Function:
				case Return:
					{
					State = 113; statement();
					}
					break;
				case OpenBracket:
				case OpenParen:
				case NullLiteral:
				case BooleanLiteral:
				case DecimalLiteral:
				case Import:
				case Identifier:
					{
					State = 114; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117; Match(OpenBrace);
				State = 118; statements();
				State = 119; Match(CloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'Q', '~', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x13', '\n', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x17', '\n', '\x3', '\a', '\x3', '\x19', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1C', '\v', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\"', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'-', '\n', '\x4', '\x5', '\x4', '/', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '>', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x43', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'H', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '_', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x62', '\v', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'g', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'j', '\v', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', 'o', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'r', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'v', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '|', 
		'\n', '\b', '\x3', '\b', '\x2', '\x3', '\b', '\t', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x2', '\x6', '\x3', '\x2', '\x16', '\x18', '\x3', 
		'\x2', '\x12', '\x13', '\x3', '\x2', '\x1F', '\"', '\x3', '\x2', '#', 
		'$', '\x2', '\x91', '\x2', '\x12', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '.', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'G', '\x3', '\x2', '\x2', '\x2', '\n', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'k', '\x3', '\x2', '\x2', '\x2', '\xE', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x13', '\x5', '\x4', '\x3', '\x2', '\x11', '\x13', 
		'\a', '\x2', '\x2', '\x3', '\x12', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x16', '\x5', '\x6', '\x4', '\x2', '\x15', '\x17', 
		'\a', '\t', '\x2', '\x2', '\x16', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x14', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', 
		'\a', '\x46', '\x2', '\x2', '\x1E', '!', '\a', 'P', '\x2', '\x2', '\x1F', 
		' ', '\a', '\v', '\x2', '\x2', ' ', '\"', '\x5', '\b', '\x5', '\x2', '!', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\"', '/', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', 'I', '\x2', '\x2', 
		'$', '%', '\a', 'P', '\x2', '\x2', '%', '&', '\a', '\x5', '\x2', '\x2', 
		'&', '\'', '\x5', '\n', '\x6', '\x2', '\'', '(', '\a', '\x6', '\x2', '\x2', 
		'(', ')', '\x5', '\xE', '\b', '\x2', ')', '/', '\x3', '\x2', '\x2', '\x2', 
		'*', ',', '\a', 'L', '\x2', '\x2', '+', '-', '\x5', '\b', '\x5', '\x2', 
		',', '+', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '/', '\x3', '\x2', '\x2', '\x2', '.', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '.', '#', '\x3', '\x2', '\x2', '\x2', '.', '*', '\x3', '\x2', '\x2', 
		'\x2', '/', '\a', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\b', '\x5', 
		'\x1', '\x2', '\x31', 'H', '\a', 'P', '\x2', '\x2', '\x32', 'H', '\a', 
		'\x39', '\x2', '\x2', '\x33', 'H', '\a', ':', '\x2', '\x2', '\x34', 'H', 
		'\a', ';', '\x2', '\x2', '\x35', '\x36', '\a', 'K', '\x2', '\x2', '\x36', 
		'H', '\x5', '\b', '\x5', '\r', '\x37', '\x38', '\a', '\x5', '\x2', '\x2', 
		'\x38', '\x39', '\x5', '\b', '\x5', '\x2', '\x39', ':', '\a', '\x6', '\x2', 
		'\x2', ':', 'H', '\x3', '\x2', '\x2', '\x2', ';', '=', '\a', '\x3', '\x2', 
		'\x2', '<', '>', '\x5', '\f', '\a', '\x2', '=', '<', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', 
		'\x2', '?', 'H', '\a', '\x4', '\x2', '\x2', '@', '\x42', '\a', '\x5', 
		'\x2', '\x2', '\x41', '\x43', '\x5', '\n', '\x6', '\x2', '\x42', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x6', 
		'\x2', '\x2', '\x45', '\x46', '\a', '\x38', '\x2', '\x2', '\x46', 'H', 
		'\x5', '\xE', '\b', '\x2', 'G', '\x30', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\x32', '\x3', '\x2', '\x2', '\x2', 'G', '\x33', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x34', '\x3', '\x2', '\x2', '\x2', 'G', '\x35', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x37', '\x3', '\x2', '\x2', '\x2', 'G', ';', '\x3', 
		'\x2', '\x2', '\x2', 'G', '@', '\x3', '\x2', '\x2', '\x2', 'H', '`', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\f', '\f', '\x2', '\x2', 'J', 'K', '\t', 
		'\x2', '\x2', '\x2', 'K', '_', '\x5', '\b', '\x5', '\r', 'L', 'M', '\f', 
		'\v', '\x2', '\x2', 'M', 'N', '\t', '\x3', '\x2', '\x2', 'N', '_', '\x5', 
		'\b', '\x5', '\f', 'O', 'P', '\f', '\n', '\x2', '\x2', 'P', 'Q', '\a', 
		'\x1A', '\x2', '\x2', 'Q', '_', '\x5', '\b', '\x5', '\v', 'R', 'S', '\f', 
		'\t', '\x2', '\x2', 'S', 'T', '\t', '\x4', '\x2', '\x2', 'T', '_', '\x5', 
		'\b', '\x5', '\n', 'U', 'V', '\f', '\b', '\x2', '\x2', 'V', 'W', '\t', 
		'\x5', '\x2', '\x2', 'W', '_', '\x5', '\b', '\x5', '\t', 'X', 'Y', '\f', 
		'\a', '\x2', '\x2', 'Y', 'Z', '\a', '*', '\x2', '\x2', 'Z', '_', '\x5', 
		'\b', '\x5', '\b', '[', '\\', '\f', '\x6', '\x2', '\x2', '\\', ']', '\a', 
		'+', '\x2', '\x2', ']', '_', '\x5', '\b', '\x5', '\a', '^', 'I', '\x3', 
		'\x2', '\x2', '\x2', '^', 'L', '\x3', '\x2', '\x2', '\x2', '^', 'O', '\x3', 
		'\x2', '\x2', '\x2', '^', 'R', '\x3', '\x2', '\x2', '\x2', '^', 'U', '\x3', 
		'\x2', '\x2', '\x2', '^', 'X', '\x3', '\x2', '\x2', '\x2', '^', '[', '\x3', 
		'\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x63', 'h', '\a', 'P', '\x2', '\x2', '\x64', '\x65', '\a', '\n', '\x2', 
		'\x2', '\x65', 'g', '\a', 'P', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'k', 
		'p', '\x5', '\b', '\x5', '\x2', 'l', 'm', '\a', '\n', '\x2', '\x2', 'm', 
		'o', '\x5', '\b', '\x5', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'o', 'r', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', 'v', '\x5', '\x6', '\x4', 
		'\x2', 't', 'v', '\x5', '\b', '\x5', '\x2', 'u', 's', '\x3', '\x2', '\x2', 
		'\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', '|', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\a', '\a', '\x2', '\x2', 'x', 'y', '\x5', '\x4', '\x3', 
		'\x2', 'y', 'z', '\a', '\b', '\x2', '\x2', 'z', '|', '\x3', '\x2', '\x2', 
		'\x2', '{', 'u', '\x3', '\x2', '\x2', '\x2', '{', 'w', '\x3', '\x2', '\x2', 
		'\x2', '|', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x16', 
		'\x1A', '!', ',', '.', '=', '\x42', 'G', '^', '`', 'h', 'p', 'u', '{',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
