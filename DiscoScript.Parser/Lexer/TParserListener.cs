//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="TParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface ITParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMain([NotNull] TParser.MainContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMain([NotNull] TParser.MainContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatements([NotNull] TParser.StatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatements([NotNull] TParser.StatementsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VarDeclaration</c>
	/// labeled alternative in <see cref="TParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDeclaration([NotNull] TParser.VarDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VarDeclaration</c>
	/// labeled alternative in <see cref="TParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDeclaration([NotNull] TParser.VarDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionDeclaration</c>
	/// labeled alternative in <see cref="TParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] TParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionDeclaration</c>
	/// labeled alternative in <see cref="TParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] TParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="TParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] TParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="TParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] TParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayDeclaration</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayDeclaration([NotNull] TParser.ArrayDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayDeclaration</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayDeclaration([NotNull] TParser.ArrayDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalExpression([NotNull] TParser.RelationalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalExpression([NotNull] TParser.RelationalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAndExpression([NotNull] TParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAndExpression([NotNull] TParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOrExpression([NotNull] TParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOrExpression([NotNull] TParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowFunction</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowFunction([NotNull] TParser.ArrowFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowFunction</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowFunction([NotNull] TParser.ArrowFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditivExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditivExpression([NotNull] TParser.AdditivExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditivExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditivExpression([NotNull] TParser.AdditivExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] TParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] TParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] TParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] TParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesedExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesedExpression([NotNull] TParser.ParenthesedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesedExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesedExpression([NotNull] TParser.ParenthesedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ImportExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportExpression([NotNull] TParser.ImportExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ImportExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportExpression([NotNull] TParser.ImportExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualityExpression([NotNull] TParser.EqualityExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualityExpression([NotNull] TParser.EqualityExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] TParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] TParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CoalesceExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCoalesceExpression([NotNull] TParser.CoalesceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CoalesceExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCoalesceExpression([NotNull] TParser.CoalesceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.identifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifiers([NotNull] TParser.IdentifiersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.identifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifiers([NotNull] TParser.IdentifiersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.commaExpressions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommaExpressions([NotNull] TParser.CommaExpressionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.commaExpressions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommaExpressions([NotNull] TParser.CommaExpressionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.codeBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeBlock([NotNull] TParser.CodeBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.codeBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeBlock([NotNull] TParser.CodeBlockContext context);
}
