//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Mech/RiderProjects/DiscoScript/DiscoScript.Parser/Lexer\TParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenBracket=1, CloseBracket=2, OpenParen=3, CloseParen=4, OpenBrace=5, 
		CloseBrace=6, SemiColon=7, Comma=8, Assign=9, QuestionMark=10, Colon=11, 
		Ellipsis=12, Dot=13, PlusPlus=14, MinusMinus=15, Plus=16, Minus=17, BitNot=18, 
		Not=19, Multiply=20, Divide=21, Modulus=22, Power=23, NullCoalesce=24, 
		UndefinedCoalesce=25, Hashtag=26, RightShiftArithmetic=27, LeftShiftArithmetic=28, 
		RightShiftLogical=29, LessThan=30, MoreThan=31, LessThanEquals=32, GreaterThanEquals=33, 
		Equals=34, NotEquals=35, IdentityEquals=36, IdentityNotEquals=37, BitAnd=38, 
		BitXOr=39, BitOr=40, And=41, Or=42, MultiplyAssign=43, DivideAssign=44, 
		ModulusAssign=45, PlusAssign=46, MinusAssign=47, LeftShiftArithmeticAssign=48, 
		RightShiftArithmeticAssign=49, RightShiftLogicalAssign=50, BitAndAssign=51, 
		BitXorAssign=52, BitOrAssign=53, PowerAssign=54, ARROW=55, LeftArrow=56, 
		RightArrow=57, NullLiteral=58, BooleanLiteral=59, DecimalLiteral=60, HexIntegerLiteral=61, 
		OctalIntegerLiteral=62, OctalIntegerLiteral2=63, BinaryIntegerLiteral=64, 
		BigHexIntegerLiteral=65, BigOctalIntegerLiteral=66, BigBinaryIntegerLiteral=67, 
		BigDecimalIntegerLiteral=68, Break=69, New=70, Var=71, Continue=72, While=73, 
		Function=74, Class=75, Import=76, Return=77, TemplateStringLiteral=78, 
		WhiteSpaces=79, LineTerminator=80, Identifier=81, StringLiteral=82;
	public const int
		RULE_main = 0, RULE_statements = 1, RULE_statement = 2, RULE_expression = 3, 
		RULE_identifiers = 4, RULE_commaExpressions = 5, RULE_codeBlock = 6, RULE_functionCallable = 7, 
		RULE_functionCall = 8;
	public static readonly string[] ruleNames = {
		"main", "statements", "statement", "expression", "identifiers", "commaExpressions", 
		"codeBlock", "functionCallable", "functionCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "','", "'='", "'?'", 
		"':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", 
		"'/'", "'%'", "'**'", "'??'", "'???'", "'#'", "'>>'", "'<<'", "'>>>'", 
		"'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", 
		"'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'**='", "'=>'", "'<-'", 
		"'->'", "'nulo'", null, null, null, null, null, null, null, null, null, 
		null, "'romper'", "'nuevo'", "'var'", "'continuar'", "'mientras'", "'funcion'", 
		"'clase'", "'importar'", "'devolver'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", 
		"Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", 
		"Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "UndefinedCoalesce", 
		"Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", 
		"LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals", 
		"NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", 
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"PowerAssign", "ARROW", "LeftArrow", "RightArrow", "NullLiteral", "BooleanLiteral", 
		"DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
		"BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
		"BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "New", 
		"Var", "Continue", "While", "Function", "Class", "Import", "Return", "TemplateStringLiteral", 
		"WhiteSpaces", "LineTerminator", "Identifier", "StringLiteral"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			State = 20;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18; statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] SemiColon() { return GetTokens(TParser.SemiColon); }
		public ITerminalNode SemiColon(int i) {
			return GetToken(TParser.SemiColon, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << LeftArrow) | (1L << RightArrow) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Var - 71)) | (1L << (Function - 71)) | (1L << (Import - 71)) | (1L << (Return - 71)) | (1L << (Identifier - 71)) | (1L << (StringLiteral - 71)))) != 0)) {
				{
				{
				State = 22; statement();
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SemiColon) {
					{
					State = 23; Match(SemiColon);
					}
				}

				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDeclarationContext : StatementContext {
		public ITerminalNode Var() { return GetToken(TParser.Var, 0); }
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(TParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDeclarationContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterVarDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitVarDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDeclarationContext : StatementContext {
		public ITerminalNode Function() { return GetToken(TParser.Function, 0); }
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public FunctionDeclarationContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ITerminalNode Return() { return GetToken(TParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				_localctx = new VarDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 31; Match(Var);
				State = 32; Match(Identifier);
				State = 35;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 33; Match(Assign);
					State = 34; expression(0);
					}
					break;
				}
				}
				break;
			case Function:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; Match(Function);
				State = 38; Match(Identifier);
				State = 39; Match(OpenParen);
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 40; identifiers();
					}
				}

				State = 43; Match(CloseParen);
				State = 44; codeBlock();
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 45; Match(Return);
				State = 47;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 46; expression(0);
					}
					break;
				}
				}
				break;
			case OpenBracket:
			case OpenParen:
			case LeftArrow:
			case RightArrow:
			case NullLiteral:
			case BooleanLiteral:
			case DecimalLiteral:
			case Import:
			case Identifier:
			case StringLiteral:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 49; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayDeclarationContext : ExpressionContext {
		public ITerminalNode OpenBracket() { return GetToken(TParser.OpenBracket, 0); }
		public ITerminalNode CloseBracket() { return GetToken(TParser.CloseBracket, 0); }
		public CommaExpressionsContext commaExpressions() {
			return GetRuleContext<CommaExpressionsContext>(0);
		}
		public ArrayDeclarationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(TParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(TParser.Divide, 0); }
		public ITerminalNode Modulus() { return GetToken(TParser.Modulus, 0); }
		public ITerminalNode Plus() { return GetToken(TParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(TParser.Minus, 0); }
		public ITerminalNode LessThan() { return GetToken(TParser.LessThan, 0); }
		public ITerminalNode MoreThan() { return GetToken(TParser.MoreThan, 0); }
		public ITerminalNode LessThanEquals() { return GetToken(TParser.LessThanEquals, 0); }
		public ITerminalNode GreaterThanEquals() { return GetToken(TParser.GreaterThanEquals, 0); }
		public ITerminalNode Equals() { return GetToken(TParser.Equals, 0); }
		public ITerminalNode NotEquals() { return GetToken(TParser.NotEquals, 0); }
		public ITerminalNode And() { return GetToken(TParser.And, 0); }
		public ITerminalNode Or() { return GetToken(TParser.Or, 0); }
		public BinaryOperationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterBinaryOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitBinaryOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrowFunctionContext : ExpressionContext {
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public ITerminalNode ARROW() { return GetToken(TParser.ARROW, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public ArrowFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterArrowFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitArrowFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UndefinedCoalesceContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode UndefinedCoalesce() { return GetToken(TParser.UndefinedCoalesce, 0); }
		public UndefinedCoalesceContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterUndefinedCoalesce(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitUndefinedCoalesce(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefinedCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsyncCallFunctionContext : ExpressionContext {
		public ITerminalNode LeftArrow() { return GetToken(TParser.LeftArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public CommaExpressionsContext commaExpressions() {
			return GetRuleContext<CommaExpressionsContext>(0);
		}
		public AsyncCallFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterAsyncCallFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitAsyncCallFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsyncCallFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public IdentifierContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralContext : ExpressionContext {
		public ITerminalNode NullLiteral() { return GetToken(TParser.NullLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(TParser.BooleanLiteral, 0); }
		public ITerminalNode DecimalLiteral() { return GetToken(TParser.DecimalLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TParser.StringLiteral, 0); }
		public LiteralContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesedExpressionContext : ExpressionContext {
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public ParenthesedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterParenthesedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitParenthesedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WaitAsyncContext : ExpressionContext {
		public ITerminalNode RightArrow() { return GetToken(TParser.RightArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WaitAsyncContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterWaitAsync(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitWaitAsync(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitAsync(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectAccessContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(TParser.Dot, 0); }
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ObjectAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterObjectAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitObjectAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportExpressionContext : ExpressionContext {
		public ITerminalNode Import() { return GetToken(TParser.Import, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ImportExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterImportExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitImportExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallFunctionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public CommaExpressionsContext commaExpressions() {
			return GetRuleContext<CommaExpressionsContext>(0);
		}
		public CallFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCallFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCallFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NullCoalesce() { return GetToken(TParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 53; Match(Identifier);
				}
				break;
			case 2:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 54; Match(NullLiteral);
				}
				break;
			case 3:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 55; Match(BooleanLiteral);
				}
				break;
			case 4:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 56; Match(DecimalLiteral);
				}
				break;
			case 5:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57; Match(StringLiteral);
				}
				break;
			case 6:
				{
				_localctx = new ImportExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 58; Match(Import);
				State = 59; expression(15);
				}
				break;
			case 7:
				{
				_localctx = new ParenthesedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 60; Match(OpenParen);
				State = 61; expression(0);
				State = 62; Match(CloseParen);
				}
				break;
			case 8:
				{
				_localctx = new ArrayDeclarationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 64; Match(OpenBracket);
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << LeftArrow) | (1L << RightArrow) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (Import - 76)) | (1L << (Identifier - 76)) | (1L << (StringLiteral - 76)))) != 0)) {
					{
					State = 65; commaExpressions();
					}
				}

				State = 68; Match(CloseBracket);
				}
				break;
			case 9:
				{
				_localctx = new AsyncCallFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 69; Match(LeftArrow);
				State = 70; expression(0);
				State = 71; Match(OpenParen);
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << LeftArrow) | (1L << RightArrow) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (Import - 76)) | (1L << (Identifier - 76)) | (1L << (StringLiteral - 76)))) != 0)) {
					{
					State = 72; commaExpressions();
					}
				}

				State = 75; Match(CloseParen);
				}
				break;
			case 10:
				{
				_localctx = new WaitAsyncContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 77; Match(RightArrow);
				State = 78; expression(3);
				}
				break;
			case 11:
				{
				_localctx = new ArrowFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79; Match(OpenParen);
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 80; identifiers();
					}
				}

				State = 83; Match(CloseParen);
				State = 84; Match(ARROW);
				State = 85; codeBlock();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 118;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 88;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 89;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 90; expression(15);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 91;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 92;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 93; expression(14);
						}
						break;
					case 3:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 94;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 95; Match(NullCoalesce);
						State = 96; expression(13);
						}
						break;
					case 4:
						{
						_localctx = new UndefinedCoalesceContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 97;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 98; Match(UndefinedCoalesce);
						State = 99; expression(12);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 100;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 101;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 102; expression(11);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 103;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 104;
						_la = TokenStream.LA(1);
						if ( !(_la==Equals || _la==NotEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 105; expression(10);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 106;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 107;
						_la = TokenStream.LA(1);
						if ( !(_la==And || _la==Or) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 108; expression(9);
						}
						break;
					case 8:
						{
						_localctx = new CallFunctionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 109;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 110; Match(OpenParen);
						State = 112;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << LeftArrow) | (1L << RightArrow) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (Import - 76)) | (1L << (Identifier - 76)) | (1L << (StringLiteral - 76)))) != 0)) {
							{
							State = 111; commaExpressions();
							}
						}

						State = 114; Match(CloseParen);
						}
						break;
					case 9:
						{
						_localctx = new ObjectAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 115;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 116; Match(Dot);
						State = 117; Match(Identifier);
						}
						break;
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(TParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(TParser.Identifier, i);
		}
		public ITerminalNode[] Comma() { return GetTokens(TParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(TParser.Comma, i);
		}
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 8, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(Identifier);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 124; Match(Comma);
				State = 125; Match(Identifier);
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(TParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(TParser.Comma, i);
		}
		public CommaExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaExpressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCommaExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCommaExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaExpressionsContext commaExpressions() {
		CommaExpressionsContext _localctx = new CommaExpressionsContext(Context, State);
		EnterRule(_localctx, 10, RULE_commaExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; expression(0);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 132; Match(Comma);
				State = 133; expression(0);
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OpenBrace() { return GetToken(TParser.OpenBrace, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(TParser.CloseBrace, 0); }
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCodeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCodeBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_codeBlock);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenParen:
			case LeftArrow:
			case RightArrow:
			case NullLiteral:
			case BooleanLiteral:
			case DecimalLiteral:
			case Var:
			case Function:
			case Import:
			case Return:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 139; statement();
					}
					break;
				case 2:
					{
					State = 140; expression(0);
					}
					break;
				}
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143; Match(OpenBrace);
				State = 144; statements();
				State = 145; Match(CloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public FunctionCallableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallableContext functionCallable() {
		FunctionCallableContext _localctx = new FunctionCallableContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionCallable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallableContext functionCallable() {
			return GetRuleContext<FunctionCallableContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public CommaExpressionsContext commaExpressions() {
			return GetRuleContext<CommaExpressionsContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; functionCallable();
			State = 152; Match(OpenParen);
			State = 153; commaExpressions();
			State = 154; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'T', '\x9F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x17', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x1B', '\n', '\x3', '\a', '\x3', '\x1D', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', ' ', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '&', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', ',', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x32', 
		'\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\x35', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x45', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'L', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'T', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'Y', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', 's', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', 'y', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '|', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x81', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x84', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '\x89', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\x8C', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x90', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x96', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x2', 
		'\x3', '\b', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x2', '\a', '\x3', '\x2', '\x16', '\x18', '\x3', '\x2', '\x12', 
		'\x13', '\x3', '\x2', ' ', '#', '\x3', '\x2', '$', '%', '\x3', '\x2', 
		'+', ',', '\x2', '\xB9', '\x2', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x6', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'X', '\x3', '\x2', '\x2', '\x2', '\n', '}', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x85', '\x3', '\x2', '\x2', '\x2', '\xE', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x99', '\x3', '\x2', '\x2', '\x2', '\x14', '\x17', '\x5', '\x4', 
		'\x3', '\x2', '\x15', '\x17', '\a', '\x2', '\x2', '\x3', '\x16', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\x5', '\x6', 
		'\x4', '\x2', '\x19', '\x1B', '\a', '\t', '\x2', '\x2', '\x1A', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', ' ', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\x5', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '!', '\"', '\a', 'I', '\x2', '\x2', '\"', '%', '\a', 'S', 
		'\x2', '\x2', '#', '$', '\a', '\v', '\x2', '\x2', '$', '&', '\x5', '\b', 
		'\x5', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x35', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', 
		'L', '\x2', '\x2', '(', ')', '\a', 'S', '\x2', '\x2', ')', '+', '\a', 
		'\x5', '\x2', '\x2', '*', ',', '\x5', '\n', '\x6', '\x2', '+', '*', '\x3', 
		'\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', 
		'\x2', '\x2', '\x2', '-', '.', '\a', '\x6', '\x2', '\x2', '.', '\x35', 
		'\x5', '\xE', '\b', '\x2', '/', '\x31', '\a', 'O', '\x2', '\x2', '\x30', 
		'\x32', '\x5', '\b', '\x5', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x35', '\x5', '\b', '\x5', '\x2', '\x34', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x34', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '/', '\x3', '\x2', '\x2', '\x2', '\x34', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\a', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\b', '\x5', '\x1', '\x2', '\x37', 'Y', '\a', 'S', '\x2', '\x2', '\x38', 
		'Y', '\a', '<', '\x2', '\x2', '\x39', 'Y', '\a', '=', '\x2', '\x2', ':', 
		'Y', '\a', '>', '\x2', '\x2', ';', 'Y', '\a', 'T', '\x2', '\x2', '<', 
		'=', '\a', 'N', '\x2', '\x2', '=', 'Y', '\x5', '\b', '\x5', '\x11', '>', 
		'?', '\a', '\x5', '\x2', '\x2', '?', '@', '\x5', '\b', '\x5', '\x2', '@', 
		'\x41', '\a', '\x6', '\x2', '\x2', '\x41', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x44', '\a', '\x3', '\x2', '\x2', '\x43', '\x45', '\x5', '\f', 
		'\a', '\x2', '\x44', '\x43', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'Y', '\a', '\x4', '\x2', '\x2', 'G', 'H', '\a', ':', '\x2', '\x2', 
		'H', 'I', '\x5', '\b', '\x5', '\x2', 'I', 'K', '\a', '\x5', '\x2', '\x2', 
		'J', 'L', '\x5', '\f', '\a', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\a', '\x6', '\x2', '\x2', 'N', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\a', ';', '\x2', '\x2', 'P', 'Y', '\x5', '\b', '\x5', '\x5', 
		'Q', 'S', '\a', '\x5', '\x2', '\x2', 'R', 'T', '\x5', '\n', '\x6', '\x2', 
		'S', 'R', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x6', '\x2', '\x2', 
		'V', 'W', '\a', '\x39', '\x2', '\x2', 'W', 'Y', '\x5', '\xE', '\b', '\x2', 
		'X', '\x36', '\x3', '\x2', '\x2', '\x2', 'X', '\x38', '\x3', '\x2', '\x2', 
		'\x2', 'X', '\x39', '\x3', '\x2', '\x2', '\x2', 'X', ':', '\x3', '\x2', 
		'\x2', '\x2', 'X', ';', '\x3', '\x2', '\x2', '\x2', 'X', '<', '\x3', '\x2', 
		'\x2', '\x2', 'X', '>', '\x3', '\x2', '\x2', '\x2', 'X', '\x42', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'G', '\x3', '\x2', '\x2', '\x2', 'X', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Q', '\x3', '\x2', '\x2', '\x2', 'Y', 'z', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\f', '\x10', '\x2', '\x2', '[', '\\', 
		'\t', '\x2', '\x2', '\x2', '\\', 'y', '\x5', '\b', '\x5', '\x11', ']', 
		'^', '\f', '\xF', '\x2', '\x2', '^', '_', '\t', '\x3', '\x2', '\x2', '_', 
		'y', '\x5', '\b', '\x5', '\x10', '`', '\x61', '\f', '\xE', '\x2', '\x2', 
		'\x61', '\x62', '\a', '\x1A', '\x2', '\x2', '\x62', 'y', '\x5', '\b', 
		'\x5', '\xF', '\x63', '\x64', '\f', '\r', '\x2', '\x2', '\x64', '\x65', 
		'\a', '\x1B', '\x2', '\x2', '\x65', 'y', '\x5', '\b', '\x5', '\xE', '\x66', 
		'g', '\f', '\f', '\x2', '\x2', 'g', 'h', '\t', '\x4', '\x2', '\x2', 'h', 
		'y', '\x5', '\b', '\x5', '\r', 'i', 'j', '\f', '\v', '\x2', '\x2', 'j', 
		'k', '\t', '\x5', '\x2', '\x2', 'k', 'y', '\x5', '\b', '\x5', '\f', 'l', 
		'm', '\f', '\n', '\x2', '\x2', 'm', 'n', '\t', '\x6', '\x2', '\x2', 'n', 
		'y', '\x5', '\b', '\x5', '\v', 'o', 'p', '\f', '\a', '\x2', '\x2', 'p', 
		'r', '\a', '\x5', '\x2', '\x2', 'q', 's', '\x5', '\f', '\a', '\x2', 'r', 
		'q', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'y', '\a', '\x6', '\x2', '\x2', 
		'u', 'v', '\f', '\x3', '\x2', '\x2', 'v', 'w', '\a', '\xF', '\x2', '\x2', 
		'w', 'y', '\a', 'S', '\x2', '\x2', 'x', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'x', ']', '\x3', '\x2', '\x2', '\x2', 'x', '`', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x63', '\x3', '\x2', '\x2', '\x2', 'x', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'i', '\x3', '\x2', '\x2', '\x2', 'x', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'o', '\x3', '\x2', '\x2', '\x2', 'x', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\t', '\x3', '\x2', 
		'\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '\x82', '\a', 
		'S', '\x2', '\x2', '~', '\x7F', '\a', '\n', '\x2', '\x2', '\x7F', '\x81', 
		'\a', 'S', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x8A', '\x5', '\b', '\x5', '\x2', '\x86', '\x87', '\a', '\n', '\x2', 
		'\x2', '\x87', '\x89', '\x5', '\b', '\x5', '\x2', '\x88', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\r', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x90', '\x5', '\x6', '\x4', '\x2', '\x8E', 
		'\x90', '\x5', '\b', '\x5', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\a', '\a', '\x2', '\x2', '\x92', 
		'\x93', '\x5', '\x4', '\x3', '\x2', '\x93', '\x94', '\a', '\b', '\x2', 
		'\x2', '\x94', '\x96', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x91', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', 'S', '\x2', '\x2', 
		'\x98', '\x11', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x5', '\x10', 
		'\t', '\x2', '\x9A', '\x9B', '\a', '\x5', '\x2', '\x2', '\x9B', '\x9C', 
		'\x5', '\f', '\a', '\x2', '\x9C', '\x9D', '\a', '\x6', '\x2', '\x2', '\x9D', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x1A', '\x1E', '%', 
		'+', '\x31', '\x34', '\x44', 'K', 'S', 'X', 'r', 'x', 'z', '\x82', '\x8A', 
		'\x8F', '\x95',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
