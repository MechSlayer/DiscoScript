//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DiscoScript.Engine.Parser.Lexer {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="TParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface ITParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMain([NotNull] TParser.MainContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMain([NotNull] TParser.MainContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatements([NotNull] TParser.StatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatements([NotNull] TParser.StatementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] TParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] TParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayDeclaration</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayDeclaration([NotNull] TParser.ArrayDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayDeclaration</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayDeclaration([NotNull] TParser.ArrayDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Decrement</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecrement([NotNull] TParser.DecrementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Decrement</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecrement([NotNull] TParser.DecrementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryOperation</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryOperation([NotNull] TParser.BinaryOperationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryOperation</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryOperation([NotNull] TParser.BinaryOperationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IndexAccess</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexAccess([NotNull] TParser.IndexAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IndexAccess</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexAccess([NotNull] TParser.IndexAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowFunction</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowFunction([NotNull] TParser.ArrowFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowFunction</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowFunction([NotNull] TParser.ArrowFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UndefinedCoalesce</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUndefinedCoalesce([NotNull] TParser.UndefinedCoalesceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UndefinedCoalesce</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUndefinedCoalesce([NotNull] TParser.UndefinedCoalesceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IndexAssignment</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexAssignment([NotNull] TParser.IndexAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IndexAssignment</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexAssignment([NotNull] TParser.IndexAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AsyncCallFunction</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAsyncCallFunction([NotNull] TParser.AsyncCallFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AsyncCallFunction</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAsyncCallFunction([NotNull] TParser.AsyncCallFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] TParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] TParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectDeclaration</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectDeclaration([NotNull] TParser.ObjectDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectDeclaration</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectDeclaration([NotNull] TParser.ObjectDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpression([NotNull] TParser.AssignmentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpression([NotNull] TParser.AssignmentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] TParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] TParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Increment</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncrement([NotNull] TParser.IncrementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Increment</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncrement([NotNull] TParser.IncrementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesedExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesedExpression([NotNull] TParser.ParenthesedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesedExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesedExpression([NotNull] TParser.ParenthesedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WaitAsync</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWaitAsync([NotNull] TParser.WaitAsyncContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WaitAsync</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWaitAsync([NotNull] TParser.WaitAsyncContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectAccess</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectAccess([NotNull] TParser.ObjectAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectAccess</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectAccess([NotNull] TParser.ObjectAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ImportExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportExpression([NotNull] TParser.ImportExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ImportExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportExpression([NotNull] TParser.ImportExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallFunction</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallFunction([NotNull] TParser.CallFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallFunction</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallFunction([NotNull] TParser.CallFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CoalesceExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCoalesceExpression([NotNull] TParser.CoalesceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CoalesceExpression</c>
	/// labeled alternative in <see cref="TParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCoalesceExpression([NotNull] TParser.CoalesceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.forILoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForILoop([NotNull] TParser.ForILoopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.forILoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForILoop([NotNull] TParser.ForILoopContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.forEachLoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachLoop([NotNull] TParser.ForEachLoopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.forEachLoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachLoop([NotNull] TParser.ForEachLoopContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeclarativeLoopInit</c>
	/// labeled alternative in <see cref="TParser.forLoopStart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarativeLoopInit([NotNull] TParser.DeclarativeLoopInitContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeclarativeLoopInit</c>
	/// labeled alternative in <see cref="TParser.forLoopStart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarativeLoopInit([NotNull] TParser.DeclarativeLoopInitContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentLoopInit</c>
	/// labeled alternative in <see cref="TParser.forLoopStart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentLoopInit([NotNull] TParser.AssignmentLoopInitContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentLoopInit</c>
	/// labeled alternative in <see cref="TParser.forLoopStart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentLoopInit([NotNull] TParser.AssignmentLoopInitContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierLoopInit</c>
	/// labeled alternative in <see cref="TParser.forLoopStart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierLoopInit([NotNull] TParser.IdentifierLoopInitContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierLoopInit</c>
	/// labeled alternative in <see cref="TParser.forLoopStart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierLoopInit([NotNull] TParser.IdentifierLoopInitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] TParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] TParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseStatement([NotNull] TParser.ElseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseStatement([NotNull] TParser.ElseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.varDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDeclaration([NotNull] TParser.VarDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.varDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDeclaration([NotNull] TParser.VarDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] TParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] TParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] TParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] TParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.identifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifiers([NotNull] TParser.IdentifiersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.identifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifiers([NotNull] TParser.IdentifiersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.commaExpressions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommaExpressions([NotNull] TParser.CommaExpressionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.commaExpressions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommaExpressions([NotNull] TParser.CommaExpressionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.codeBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeBlock([NotNull] TParser.CodeBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.codeBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeBlock([NotNull] TParser.CodeBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.objectMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectMember([NotNull] TParser.ObjectMemberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.objectMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectMember([NotNull] TParser.ObjectMemberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.functionCallable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallable([NotNull] TParser.FunctionCallableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.functionCallable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallable([NotNull] TParser.FunctionCallableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] TParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] TParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] TParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] TParser.FunctionCallContext context);
}
} // namespace DiscoScript.Engine.Parser.Lexer
