//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DiscoScript.Engine.Parser.Lexer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenBracket=1, CloseBracket=2, OpenParen=3, CloseParen=4, OpenBrace=5, 
		CloseBrace=6, SemiColon=7, Comma=8, Assign=9, QuestionMark=10, Colon=11, 
		Ellipsis=12, Dot=13, PlusPlus=14, MinusMinus=15, Plus=16, Minus=17, BitNot=18, 
		Not=19, Multiply=20, Divide=21, Modulus=22, Power=23, NullCoalesce=24, 
		UndefinedCoalesce=25, Hashtag=26, RightShiftArithmetic=27, LeftShiftArithmetic=28, 
		RightShiftLogical=29, LessThan=30, MoreThan=31, LessThanEquals=32, GreaterThanEquals=33, 
		Equals=34, NotEquals=35, IdentityEquals=36, IdentityNotEquals=37, BitAnd=38, 
		BitXOr=39, BitOr=40, And=41, Or=42, MultiplyAssign=43, DivideAssign=44, 
		ModulusAssign=45, PlusAssign=46, MinusAssign=47, LeftShiftArithmeticAssign=48, 
		RightShiftArithmeticAssign=49, RightShiftLogicalAssign=50, BitAndAssign=51, 
		BitXorAssign=52, BitOrAssign=53, PowerAssign=54, ARROW=55, LeftArrow=56, 
		RightArrow=57, NullLiteral=58, BooleanLiteral=59, DecimalLiteral=60, HexIntegerLiteral=61, 
		OctalIntegerLiteral=62, OctalIntegerLiteral2=63, BinaryIntegerLiteral=64, 
		BigHexIntegerLiteral=65, BigOctalIntegerLiteral=66, BigBinaryIntegerLiteral=67, 
		BigDecimalIntegerLiteral=68, Break=69, New=70, Var=71, Continue=72, While=73, 
		Function=74, Class=75, Import=76, Return=77, NaN=78, For=79, In=80, If=81, 
		Else=82, TemplateStringLiteral=83, WhiteSpaces=84, LineTerminator=85, 
		Identifier=86, StringLiteral=87;
	public const int
		RULE_main = 0, RULE_statements = 1, RULE_statement = 2, RULE_expression = 3, 
		RULE_forILoop = 4, RULE_forEachLoop = 5, RULE_forLoopStart = 6, RULE_ifStatement = 7, 
		RULE_elseStatement = 8, RULE_varDeclaration = 9, RULE_functionDeclaration = 10, 
		RULE_returnStatement = 11, RULE_identifiers = 12, RULE_commaExpressions = 13, 
		RULE_codeBlock = 14, RULE_objectMember = 15, RULE_functionCallable = 16, 
		RULE_assignment = 17, RULE_functionCall = 18;
	public static readonly string[] ruleNames = {
		"main", "statements", "statement", "expression", "forILoop", "forEachLoop", 
		"forLoopStart", "ifStatement", "elseStatement", "varDeclaration", "functionDeclaration", 
		"returnStatement", "identifiers", "commaExpressions", "codeBlock", "objectMember", 
		"functionCallable", "assignment", "functionCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "','", "'='", "'?'", 
		"':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", 
		"'/'", "'%'", "'**'", "'??'", "'???'", "'#'", "'>>'", "'<<'", "'>>>'", 
		"'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", 
		"'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'**='", "'=>'", "'<-'", 
		"'->'", "'nulo'", null, null, null, null, null, null, null, null, null, 
		null, "'romper'", "'nuevo'", "'var'", "'continuar'", "'mientras'", "'funcion'", 
		"'clase'", "'importar'", "'devolver'", "'NaN'", "'por_cada'", "'en'", 
		"'si'", "'si_no'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", 
		"Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", 
		"Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "UndefinedCoalesce", 
		"Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", 
		"LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals", 
		"NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", 
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"PowerAssign", "ARROW", "LeftArrow", "RightArrow", "NullLiteral", "BooleanLiteral", 
		"DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
		"BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
		"BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "New", 
		"Var", "Continue", "While", "Function", "Class", "Import", "Return", "NaN", 
		"For", "In", "If", "Else", "TemplateStringLiteral", "WhiteSpaces", "LineTerminator", 
		"Identifier", "StringLiteral"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] SemiColon() { return GetTokens(TParser.SemiColon); }
		public ITerminalNode SemiColon(int i) {
			return GetToken(TParser.SemiColon, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << LeftArrow) | (1L << RightArrow) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Var - 71)) | (1L << (Function - 71)) | (1L << (Import - 71)) | (1L << (Return - 71)) | (1L << (NaN - 71)) | (1L << (For - 71)) | (1L << (If - 71)) | (1L << (Identifier - 71)) | (1L << (StringLiteral - 71)))) != 0)) {
				{
				{
				State = 42; statement();
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SemiColon) {
					{
					State = 43; Match(SemiColon);
					}
				}

				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ForILoopContext forILoop() {
			return GetRuleContext<ForILoopContext>(0);
		}
		public ForEachLoopContext forEachLoop() {
			return GetRuleContext<ForEachLoopContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; varDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; functionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53; returnStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 54; forILoop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 55; forEachLoop();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 56; ifStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 57; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayDeclarationContext : ExpressionContext {
		public ITerminalNode OpenBracket() { return GetToken(TParser.OpenBracket, 0); }
		public ITerminalNode CloseBracket() { return GetToken(TParser.CloseBracket, 0); }
		public CommaExpressionsContext commaExpressions() {
			return GetRuleContext<CommaExpressionsContext>(0);
		}
		public ArrayDeclarationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecrementContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode MinusMinus() { return GetToken(TParser.MinusMinus, 0); }
		public DecrementContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterDecrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitDecrement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(TParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(TParser.Divide, 0); }
		public ITerminalNode Modulus() { return GetToken(TParser.Modulus, 0); }
		public ITerminalNode Plus() { return GetToken(TParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(TParser.Minus, 0); }
		public ITerminalNode LessThan() { return GetToken(TParser.LessThan, 0); }
		public ITerminalNode MoreThan() { return GetToken(TParser.MoreThan, 0); }
		public ITerminalNode LessThanEquals() { return GetToken(TParser.LessThanEquals, 0); }
		public ITerminalNode GreaterThanEquals() { return GetToken(TParser.GreaterThanEquals, 0); }
		public ITerminalNode Equals() { return GetToken(TParser.Equals, 0); }
		public ITerminalNode NotEquals() { return GetToken(TParser.NotEquals, 0); }
		public ITerminalNode And() { return GetToken(TParser.And, 0); }
		public ITerminalNode Or() { return GetToken(TParser.Or, 0); }
		public BinaryOperationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterBinaryOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitBinaryOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexAccessContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OpenBracket() { return GetToken(TParser.OpenBracket, 0); }
		public ITerminalNode CloseBracket() { return GetToken(TParser.CloseBracket, 0); }
		public IndexAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIndexAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIndexAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrowFunctionContext : ExpressionContext {
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public ITerminalNode ARROW() { return GetToken(TParser.ARROW, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public ArrowFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterArrowFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitArrowFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UndefinedCoalesceContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode UndefinedCoalesce() { return GetToken(TParser.UndefinedCoalesce, 0); }
		public UndefinedCoalesceContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterUndefinedCoalesce(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitUndefinedCoalesce(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefinedCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexAssignmentContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OpenBracket() { return GetToken(TParser.OpenBracket, 0); }
		public ITerminalNode CloseBracket() { return GetToken(TParser.CloseBracket, 0); }
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IndexAssignmentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIndexAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIndexAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsyncCallFunctionContext : ExpressionContext {
		public ITerminalNode LeftArrow() { return GetToken(TParser.LeftArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public CommaExpressionsContext commaExpressions() {
			return GetRuleContext<CommaExpressionsContext>(0);
		}
		public AsyncCallFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterAsyncCallFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitAsyncCallFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsyncCallFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public IdentifierContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectDeclarationContext : ExpressionContext {
		public ITerminalNode OpenBrace() { return GetToken(TParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(TParser.CloseBrace, 0); }
		public ObjectMemberContext[] objectMember() {
			return GetRuleContexts<ObjectMemberContext>();
		}
		public ObjectMemberContext objectMember(int i) {
			return GetRuleContext<ObjectMemberContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(TParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(TParser.Comma, i);
		}
		public ObjectDeclarationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterObjectDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitObjectDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralContext : ExpressionContext {
		public ITerminalNode NullLiteral() { return GetToken(TParser.NullLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(TParser.BooleanLiteral, 0); }
		public ITerminalNode DecimalLiteral() { return GetToken(TParser.DecimalLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TParser.StringLiteral, 0); }
		public ITerminalNode NaN() { return GetToken(TParser.NaN, 0); }
		public LiteralContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PlusPlus() { return GetToken(TParser.PlusPlus, 0); }
		public IncrementContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIncrement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesedExpressionContext : ExpressionContext {
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public ParenthesedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterParenthesedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitParenthesedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WaitAsyncContext : ExpressionContext {
		public ITerminalNode RightArrow() { return GetToken(TParser.RightArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WaitAsyncContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterWaitAsync(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitWaitAsync(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitAsync(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectAccessContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(TParser.Dot, 0); }
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ObjectAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterObjectAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitObjectAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportExpressionContext : ExpressionContext {
		public ITerminalNode Import() { return GetToken(TParser.Import, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ImportExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterImportExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitImportExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallFunctionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public CommaExpressionsContext commaExpressions() {
			return GetRuleContext<CommaExpressionsContext>(0);
		}
		public CallFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCallFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCallFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NullCoalesce() { return GetToken(TParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 61; Match(Identifier);
				}
				break;
			case 2:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62; Match(NullLiteral);
				}
				break;
			case 3:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 63; Match(BooleanLiteral);
				}
				break;
			case 4:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 64; Match(DecimalLiteral);
				}
				break;
			case 5:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 65; Match(StringLiteral);
				}
				break;
			case 6:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 66; Match(NaN);
				}
				break;
			case 7:
				{
				_localctx = new ImportExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 67; Match(Import);
				State = 68; expression(21);
				}
				break;
			case 8:
				{
				_localctx = new ParenthesedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 69; Match(OpenParen);
				State = 70; expression(0);
				State = 71; Match(CloseParen);
				}
				break;
			case 9:
				{
				_localctx = new ArrayDeclarationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 73; Match(OpenBracket);
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << LeftArrow) | (1L << RightArrow) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (Import - 76)) | (1L << (NaN - 76)) | (1L << (Identifier - 76)) | (1L << (StringLiteral - 76)))) != 0)) {
					{
					State = 74; commaExpressions();
					}
				}

				State = 77; Match(CloseBracket);
				}
				break;
			case 10:
				{
				_localctx = new AsyncCallFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 78; Match(LeftArrow);
				State = 79; expression(0);
				State = 80; Match(OpenParen);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << LeftArrow) | (1L << RightArrow) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (Import - 76)) | (1L << (NaN - 76)) | (1L << (Identifier - 76)) | (1L << (StringLiteral - 76)))) != 0)) {
					{
					State = 81; commaExpressions();
					}
				}

				State = 84; Match(CloseParen);
				}
				break;
			case 11:
				{
				_localctx = new WaitAsyncContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 86; Match(RightArrow);
				State = 87; expression(8);
				}
				break;
			case 12:
				{
				_localctx = new ArrowFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88; Match(OpenParen);
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 89; identifiers();
					}
				}

				State = 92; Match(CloseParen);
				State = 93; Match(ARROW);
				State = 94; codeBlock();
				}
				break;
			case 13:
				{
				_localctx = new ObjectDeclarationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 95; Match(OpenBrace);
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Identifier) {
					{
					{
					State = 96; objectMember();
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Comma) {
						{
						State = 97; Match(Comma);
						}
					}

					}
					}
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 105; Match(CloseBrace);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 160;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 158;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 108;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 109; assignment();
						State = 110; expression(21);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 112;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 113;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 114; expression(20);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 115;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 116;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 117; expression(19);
						}
						break;
					case 4:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 118;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 119; Match(NullCoalesce);
						State = 120; expression(18);
						}
						break;
					case 5:
						{
						_localctx = new UndefinedCoalesceContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 121;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 122; Match(UndefinedCoalesce);
						State = 123; expression(17);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 124;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 125;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 126; expression(16);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 127;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 128;
						_la = TokenStream.LA(1);
						if ( !(_la==Equals || _la==NotEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 129; expression(15);
						}
						break;
					case 8:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 130;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 131;
						_la = TokenStream.LA(1);
						if ( !(_la==And || _la==Or) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 132; expression(14);
						}
						break;
					case 9:
						{
						_localctx = new IndexAssignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 133;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 134; Match(OpenBracket);
						State = 135; expression(0);
						State = 136; Match(CloseBracket);
						State = 137; assignment();
						State = 138; expression(2);
						}
						break;
					case 10:
						{
						_localctx = new CallFunctionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 141; Match(OpenParen);
						State = 143;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << LeftArrow) | (1L << RightArrow) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (Import - 76)) | (1L << (NaN - 76)) | (1L << (Identifier - 76)) | (1L << (StringLiteral - 76)))) != 0)) {
							{
							State = 142; commaExpressions();
							}
						}

						State = 145; Match(CloseParen);
						}
						break;
					case 11:
						{
						_localctx = new ObjectAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 146;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 147; Match(Dot);
						State = 148; Match(Identifier);
						}
						break;
					case 12:
						{
						_localctx = new IncrementContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 149;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 150; Match(PlusPlus);
						}
						break;
					case 13:
						{
						_localctx = new DecrementContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 152; Match(MinusMinus);
						}
						break;
					case 14:
						{
						_localctx = new IndexAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 153;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 154; Match(OpenBracket);
						State = 155; expression(0);
						State = 156; Match(CloseBracket);
						}
						break;
					}
					} 
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ForILoopContext : ParserRuleContext {
		public ITerminalNode For() { return GetToken(TParser.For, 0); }
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ForLoopStartContext forLoopStart() {
			return GetRuleContext<ForLoopStartContext>(0);
		}
		public ITerminalNode[] SemiColon() { return GetTokens(TParser.SemiColon); }
		public ITerminalNode SemiColon(int i) {
			return GetToken(TParser.SemiColon, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ForILoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forILoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterForILoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitForILoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForILoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForILoopContext forILoop() {
		ForILoopContext _localctx = new ForILoopContext(Context, State);
		EnterRule(_localctx, 8, RULE_forILoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(For);
			State = 164; Match(OpenParen);
			State = 165; forLoopStart();
			State = 166; Match(SemiColon);
			State = 167; expression(0);
			State = 168; Match(SemiColon);
			State = 169; expression(0);
			State = 170; Match(CloseParen);
			State = 171; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachLoopContext : ParserRuleContext {
		public ITerminalNode For() { return GetToken(TParser.For, 0); }
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ITerminalNode Var() { return GetToken(TParser.Var, 0); }
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ITerminalNode In() { return GetToken(TParser.In, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ForEachLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterForEachLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitForEachLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachLoopContext forEachLoop() {
		ForEachLoopContext _localctx = new ForEachLoopContext(Context, State);
		EnterRule(_localctx, 10, RULE_forEachLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(For);
			State = 174; Match(OpenParen);
			State = 175; Match(Var);
			State = 176; Match(Identifier);
			State = 177; Match(In);
			State = 178; expression(0);
			State = 179; Match(CloseParen);
			State = 180; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopStartContext : ParserRuleContext {
		public ForLoopStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoopStart; } }
	 
		public ForLoopStartContext() { }
		public virtual void CopyFrom(ForLoopStartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignmentLoopInitContext : ForLoopStartContext {
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(TParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentLoopInitContext(ForLoopStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterAssignmentLoopInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitAssignmentLoopInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentLoopInit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierLoopInitContext : ForLoopStartContext {
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public IdentifierLoopInitContext(ForLoopStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIdentifierLoopInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIdentifierLoopInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierLoopInit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarativeLoopInitContext : ForLoopStartContext {
		public ITerminalNode Var() { return GetToken(TParser.Var, 0); }
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(TParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarativeLoopInitContext(ForLoopStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterDeclarativeLoopInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitDeclarativeLoopInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarativeLoopInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopStartContext forLoopStart() {
		ForLoopStartContext _localctx = new ForLoopStartContext(Context, State);
		EnterRule(_localctx, 12, RULE_forLoopStart);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new DeclarativeLoopInitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 182; Match(Var);
				State = 183; Match(Identifier);
				State = 184; Match(Assign);
				State = 185; expression(0);
				}
				}
				break;
			case 2:
				_localctx = new AssignmentLoopInitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 186; Match(Identifier);
				State = 187; Match(Assign);
				State = 188; expression(0);
				}
				}
				break;
			case 3:
				_localctx = new IdentifierLoopInitContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 189; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(TParser.If, 0); }
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(If);
			State = 193; Match(OpenParen);
			State = 194; expression(0);
			State = 195; Match(CloseParen);
			State = 196; codeBlock();
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 197; elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(TParser.Else, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(Else);
			State = 201; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(TParser.Var, 0); }
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(TParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterVarDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitVarDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_varDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(Var);
			State = 204; Match(Identifier);
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 205; Match(Assign);
				State = 206; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(TParser.Function, 0); }
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(Function);
			State = 210; Match(Identifier);
			State = 211; Match(OpenParen);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 212; identifiers();
				}
			}

			State = 215; Match(CloseParen);
			State = 216; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(TParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(Return);
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 219; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(TParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(TParser.Identifier, i);
		}
		public ITerminalNode[] Comma() { return GetTokens(TParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(TParser.Comma, i);
		}
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 24, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(Identifier);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 223; Match(Comma);
				State = 224; Match(Identifier);
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(TParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(TParser.Comma, i);
		}
		public CommaExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaExpressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCommaExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCommaExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaExpressionsContext commaExpressions() {
		CommaExpressionsContext _localctx = new CommaExpressionsContext(Context, State);
		EnterRule(_localctx, 26, RULE_commaExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; expression(0);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 231; Match(Comma);
				State = 232; expression(0);
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OpenBrace() { return GetToken(TParser.OpenBrace, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(TParser.CloseBrace, 0); }
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterCodeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitCodeBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_codeBlock);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 238; statement();
					}
					break;
				case 2:
					{
					State = 239; expression(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242; Match(OpenBrace);
				State = 243; statements();
				State = 244; Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectMemberContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public ITerminalNode Colon() { return GetToken(TParser.Colon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterObjectMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitObjectMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectMemberContext objectMember() {
		ObjectMemberContext _localctx = new ObjectMemberContext(Context, State);
		EnterRule(_localctx, 30, RULE_objectMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(Identifier);
			State = 249; Match(Colon);
			State = 250; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TParser.Identifier, 0); }
		public FunctionCallableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallableContext functionCallable() {
		FunctionCallableContext _localctx = new FunctionCallableContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionCallable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode Assign() { return GetToken(TParser.Assign, 0); }
		public ITerminalNode PlusAssign() { return GetToken(TParser.PlusAssign, 0); }
		public ITerminalNode MinusAssign() { return GetToken(TParser.MinusAssign, 0); }
		public ITerminalNode MultiplyAssign() { return GetToken(TParser.MultiplyAssign, 0); }
		public ITerminalNode DivideAssign() { return GetToken(TParser.DivideAssign, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Assign) | (1L << MultiplyAssign) | (1L << DivideAssign) | (1L << PlusAssign) | (1L << MinusAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallableContext functionCallable() {
			return GetRuleContext<FunctionCallableContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(TParser.OpenParen, 0); }
		public CommaExpressionsContext commaExpressions() {
			return GetRuleContext<CommaExpressionsContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(TParser.CloseParen, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITParserListener typedListener = listener as ITParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITParserVisitor<TResult> typedVisitor = visitor as ITParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; functionCallable();
			State = 257; Match(OpenParen);
			State = 258; commaExpressions();
			State = 259; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'Y', '\x108', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '+', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '/', 
		'\n', '\x3', '\a', '\x3', '\x31', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x34', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '=', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'N', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'U', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', ']', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x65', 
		'\n', '\x5', '\a', '\x5', 'g', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'j', '\v', '\x5', '\x3', '\x5', '\x5', '\x5', 'm', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x92', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\xA1', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xA4', '\v', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\xC1', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xC9', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xD2', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xD8', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\xDF', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\xE4', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xE7', '\v', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xEC', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xEF', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xF3', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xF9', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x2', '\x3', 
		'\b', '\x15', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', 
		'\b', '\x3', '\x2', '\x16', '\x18', '\x3', '\x2', '\x12', '\x13', '\x3', 
		'\x2', ' ', '#', '\x3', '\x2', '$', '%', '\x3', '\x2', '+', ',', '\x5', 
		'\x2', '\v', '\v', '-', '.', '\x30', '\x31', '\x2', '\x127', '\x2', '*', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '<', '\x3', '\x2', '\x2', '\x2', '\b', 'l', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\xA5', '\x3', '\x2', '\x2', '\x2', '\f', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xC0', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\x12', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x16', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xDC', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xF8', '\x3', '\x2', '\x2', '\x2', ' ', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xFE', '\x3', '\x2', '\x2', '\x2', '$', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'(', '+', '\x5', '\x4', '\x3', '\x2', ')', '+', '\a', '\x2', '\x2', '\x3', 
		'*', '(', '\x3', '\x2', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', 
		'+', '\x3', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x5', '\x6', '\x4', 
		'\x2', '-', '/', '\a', '\t', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x30', ',', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '=', 
		'\x5', '\x14', '\v', '\x2', '\x36', '=', '\x5', '\x16', '\f', '\x2', '\x37', 
		'=', '\x5', '\x18', '\r', '\x2', '\x38', '=', '\x5', '\n', '\x6', '\x2', 
		'\x39', '=', '\x5', '\f', '\a', '\x2', ':', '=', '\x5', '\x10', '\t', 
		'\x2', ';', '=', '\x5', '\b', '\x5', '\x2', '<', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x36', '\x3', '\x2', '\x2', '\x2', '<', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x38', '\x3', '\x2', '\x2', '\x2', '<', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', 
		';', '\x3', '\x2', '\x2', '\x2', '=', '\a', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\b', '\x5', '\x1', '\x2', '?', 'm', '\a', 'X', '\x2', '\x2', 
		'@', 'm', '\a', '<', '\x2', '\x2', '\x41', 'm', '\a', '=', '\x2', '\x2', 
		'\x42', 'm', '\a', '>', '\x2', '\x2', '\x43', 'm', '\a', 'Y', '\x2', '\x2', 
		'\x44', 'm', '\a', 'P', '\x2', '\x2', '\x45', '\x46', '\a', 'N', '\x2', 
		'\x2', '\x46', 'm', '\x5', '\b', '\x5', '\x17', 'G', 'H', '\a', '\x5', 
		'\x2', '\x2', 'H', 'I', '\x5', '\b', '\x5', '\x2', 'I', 'J', '\a', '\x6', 
		'\x2', '\x2', 'J', 'm', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\a', '\x3', 
		'\x2', '\x2', 'L', 'N', '\x5', '\x1C', '\xF', '\x2', 'M', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'm', '\a', '\x4', '\x2', '\x2', 'P', 'Q', '\a', 
		':', '\x2', '\x2', 'Q', 'R', '\x5', '\b', '\x5', '\x2', 'R', 'T', '\a', 
		'\x5', '\x2', '\x2', 'S', 'U', '\x5', '\x1C', '\xF', '\x2', 'T', 'S', 
		'\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 
		'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x6', '\x2', '\x2', 
		'W', 'm', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', ';', '\x2', '\x2', 
		'Y', 'm', '\x5', '\b', '\x5', '\n', 'Z', '\\', '\a', '\x5', '\x2', '\x2', 
		'[', ']', '\x5', '\x1A', '\xE', '\x2', '\\', '[', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\a', '\x6', '\x2', '\x2', '_', '`', '\a', '\x39', 
		'\x2', '\x2', '`', 'm', '\x5', '\x1E', '\x10', '\x2', '\x61', 'h', '\a', 
		'\a', '\x2', '\x2', '\x62', '\x64', '\x5', ' ', '\x11', '\x2', '\x63', 
		'\x65', '\a', '\n', '\x2', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\x62', '\x3', '\x2', '\x2', '\x2', 'g', 
		'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x3', '\x2', '\x2', '\x2', 
		'j', 'h', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\a', '\b', '\x2', '\x2', 
		'l', '>', '\x3', '\x2', '\x2', '\x2', 'l', '@', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x41', '\x3', '\x2', '\x2', '\x2', 'l', '\x42', '\x3', '\x2', '\x2', 
		'\x2', 'l', '\x43', '\x3', '\x2', '\x2', '\x2', 'l', '\x44', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x45', '\x3', '\x2', '\x2', '\x2', 'l', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'K', '\x3', '\x2', '\x2', '\x2', 'l', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'X', '\x3', '\x2', '\x2', '\x2', 'l', 'Z', '\x3', 
		'\x2', '\x2', '\x2', 'l', '\x61', '\x3', '\x2', '\x2', '\x2', 'm', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', 'n', 'o', '\f', '\x16', '\x2', '\x2', 'o', 
		'p', '\x5', '$', '\x13', '\x2', 'p', 'q', '\x5', '\b', '\x5', '\x17', 
		'q', '\xA1', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\f', '\x15', '\x2', 
		'\x2', 's', 't', '\t', '\x2', '\x2', '\x2', 't', '\xA1', '\x5', '\b', 
		'\x5', '\x16', 'u', 'v', '\f', '\x14', '\x2', '\x2', 'v', 'w', '\t', '\x3', 
		'\x2', '\x2', 'w', '\xA1', '\x5', '\b', '\x5', '\x15', 'x', 'y', '\f', 
		'\x13', '\x2', '\x2', 'y', 'z', '\a', '\x1A', '\x2', '\x2', 'z', '\xA1', 
		'\x5', '\b', '\x5', '\x14', '{', '|', '\f', '\x12', '\x2', '\x2', '|', 
		'}', '\a', '\x1B', '\x2', '\x2', '}', '\xA1', '\x5', '\b', '\x5', '\x13', 
		'~', '\x7F', '\f', '\x11', '\x2', '\x2', '\x7F', '\x80', '\t', '\x4', 
		'\x2', '\x2', '\x80', '\xA1', '\x5', '\b', '\x5', '\x12', '\x81', '\x82', 
		'\f', '\x10', '\x2', '\x2', '\x82', '\x83', '\t', '\x5', '\x2', '\x2', 
		'\x83', '\xA1', '\x5', '\b', '\x5', '\x11', '\x84', '\x85', '\f', '\xF', 
		'\x2', '\x2', '\x85', '\x86', '\t', '\x6', '\x2', '\x2', '\x86', '\xA1', 
		'\x5', '\b', '\x5', '\x10', '\x87', '\x88', '\f', '\x3', '\x2', '\x2', 
		'\x88', '\x89', '\a', '\x3', '\x2', '\x2', '\x89', '\x8A', '\x5', '\b', 
		'\x5', '\x2', '\x8A', '\x8B', '\a', '\x4', '\x2', '\x2', '\x8B', '\x8C', 
		'\x5', '$', '\x13', '\x2', '\x8C', '\x8D', '\x5', '\b', '\x5', '\x4', 
		'\x8D', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\f', '\f', 
		'\x2', '\x2', '\x8F', '\x91', '\a', '\x5', '\x2', '\x2', '\x90', '\x92', 
		'\x5', '\x1C', '\xF', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\xA1', '\a', '\x6', '\x2', '\x2', '\x94', '\x95', 
		'\f', '\b', '\x2', '\x2', '\x95', '\x96', '\a', '\xF', '\x2', '\x2', '\x96', 
		'\xA1', '\a', 'X', '\x2', '\x2', '\x97', '\x98', '\f', '\x6', '\x2', '\x2', 
		'\x98', '\xA1', '\a', '\x10', '\x2', '\x2', '\x99', '\x9A', '\f', '\x5', 
		'\x2', '\x2', '\x9A', '\xA1', '\a', '\x11', '\x2', '\x2', '\x9B', '\x9C', 
		'\f', '\x4', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x3', '\x2', '\x2', 
		'\x9D', '\x9E', '\x5', '\b', '\x5', '\x2', '\x9E', '\x9F', '\a', '\x4', 
		'\x2', '\x2', '\x9F', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA0', 'n', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', 'r', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'u', '\x3', '\x2', '\x2', '\x2', '\xA0', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '{', '\x3', '\x2', '\x2', '\x2', '\xA0', '~', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x81', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\x87', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', 'Q', '\x2', '\x2', '\xA6', '\xA7', '\a', '\x5', '\x2', '\x2', 
		'\xA7', '\xA8', '\x5', '\xE', '\b', '\x2', '\xA8', '\xA9', '\a', '\t', 
		'\x2', '\x2', '\xA9', '\xAA', '\x5', '\b', '\x5', '\x2', '\xAA', '\xAB', 
		'\a', '\t', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\b', '\x5', '\x2', '\xAC', 
		'\xAD', '\a', '\x6', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\x1E', '\x10', 
		'\x2', '\xAE', '\v', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		'Q', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x5', '\x2', '\x2', '\xB1', 
		'\xB2', '\a', 'I', '\x2', '\x2', '\xB2', '\xB3', '\a', 'X', '\x2', '\x2', 
		'\xB3', '\xB4', '\a', 'R', '\x2', '\x2', '\xB4', '\xB5', '\x5', '\b', 
		'\x5', '\x2', '\xB5', '\xB6', '\a', '\x6', '\x2', '\x2', '\xB6', '\xB7', 
		'\x5', '\x1E', '\x10', '\x2', '\xB7', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xB9', '\a', 'I', '\x2', '\x2', '\xB9', '\xBA', '\a', 'X', '\x2', 
		'\x2', '\xBA', '\xBB', '\a', '\v', '\x2', '\x2', '\xBB', '\xC1', '\x5', 
		'\b', '\x5', '\x2', '\xBC', '\xBD', '\a', 'X', '\x2', '\x2', '\xBD', '\xBE', 
		'\a', '\v', '\x2', '\x2', '\xBE', '\xC1', '\x5', '\b', '\x5', '\x2', '\xBF', 
		'\xC1', '\a', 'X', '\x2', '\x2', '\xC0', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xF', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\a', 'S', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x5', '\x2', '\x2', 
		'\xC4', '\xC5', '\x5', '\b', '\x5', '\x2', '\xC5', '\xC6', '\a', '\x6', 
		'\x2', '\x2', '\xC6', '\xC8', '\x5', '\x1E', '\x10', '\x2', '\xC7', '\xC9', 
		'\x5', '\x12', '\n', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xCB', '\a', 'T', '\x2', '\x2', '\xCB', '\xCC', 
		'\x5', '\x1E', '\x10', '\x2', '\xCC', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xCE', '\a', 'I', '\x2', '\x2', '\xCE', '\xD1', '\a', 'X', '\x2', 
		'\x2', '\xCF', '\xD0', '\a', '\v', '\x2', '\x2', '\xD0', '\xD2', '\x5', 
		'\b', '\x5', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\a', 'L', '\x2', '\x2', '\xD4', '\xD5', '\a', 
		'X', '\x2', '\x2', '\xD5', '\xD7', '\a', '\x5', '\x2', '\x2', '\xD6', 
		'\xD8', '\x5', '\x1A', '\xE', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', '\x6', '\x2', '\x2', '\xDA', 
		'\xDB', '\x5', '\x1E', '\x10', '\x2', '\xDB', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDE', '\a', 'O', '\x2', '\x2', '\xDD', '\xDF', '\x5', 
		'\b', '\x5', '\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE5', '\a', 'X', '\x2', '\x2', '\xE1', '\xE2', '\a', 
		'\n', '\x2', '\x2', '\xE2', '\xE4', '\a', 'X', '\x2', '\x2', '\xE3', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xED', '\x5', '\b', '\x5', '\x2', 
		'\xE9', '\xEA', '\a', '\n', '\x2', '\x2', '\xEA', '\xEC', '\x5', '\b', 
		'\x5', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF3', 
		'\x5', '\x6', '\x4', '\x2', '\xF1', '\xF3', '\x5', '\b', '\x5', '\x2', 
		'\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', 
		'\a', '\a', '\x2', '\x2', '\xF5', '\xF6', '\x5', '\x4', '\x3', '\x2', 
		'\xF6', '\xF7', '\a', '\b', '\x2', '\x2', '\xF7', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xFB', '\a', 'X', '\x2', '\x2', '\xFB', '\xFC', '\a', '\r', '\x2', 
		'\x2', '\xFC', '\xFD', '\x5', '\b', '\x5', '\x2', '\xFD', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', 'X', '\x2', '\x2', '\xFF', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\t', '\a', '\x2', 
		'\x2', '\x101', '%', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x5', 
		'\"', '\x12', '\x2', '\x103', '\x104', '\a', '\x5', '\x2', '\x2', '\x104', 
		'\x105', '\x5', '\x1C', '\xF', '\x2', '\x105', '\x106', '\a', '\x6', '\x2', 
		'\x2', '\x106', '\'', '\x3', '\x2', '\x2', '\x2', '\x18', '*', '.', '\x32', 
		'<', 'M', 'T', '\\', '\x64', 'h', 'l', '\x91', '\xA0', '\xA2', '\xC0', 
		'\xC8', '\xD1', '\xD7', '\xDE', '\xE5', '\xED', '\xF2', '\xF8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DiscoScript.Engine.Parser.Lexer
